{"version":3,"sources":["images/arrow.svg","Components/Atoms/CoverResizer.tsx","config.ts","Utils/TimerUtil.ts","Components/Atoms/FakeMapFooter.tsx","Components/Pages/FakeMapPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CoverResizerElement","props","aspectRatio","children","useState","centeredStyle","setCenteredStyles","bounds","onResize","rect","undefined","width","height","left","top","position","measureRef","ref","style","CoverResizer","React","memo","config","backgroundVideoURL","process","videoMinStep","videoMaxStep","TimerUtil","from","to","duration","steps","callback","onFinish","interval","i","intervalID","window","setInterval","clearInterval","FakeMapFooterElement","currentYear","Date","getFullYear","className","FakeMapFooter","FakeMapPageElement","currentStep","useRef","isPlaying","playerRef","queueNextPlay","nextPlayDirection","handlePlay","toStep","current","nextStep","Math","max","min","t","seekTo","url","display","cursor","alignSelf","flex","onMouseDown","FakeMapPage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0aea155.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/arrow.959ef8d9.svg\";","import React, { CSSProperties, useState } from 'react';\nimport Measure, { ContentRect } from 'react-measure';\n\ntype CoverResizerProps = React.PropsWithChildren<{\n  aspectRatio: number;\n}>;\n\nconst CoverResizerElement: React.FC<CoverResizerProps> = (props) => {\n  const { aspectRatio, children } = props;\n\n  const [centeredStyle, setCenteredStyles] = useState<CSSProperties>({});\n\n  const handleResize = (rect: ContentRect) => {\n    if (rect.bounds === undefined) {\n      return;\n    }\n\n    let width: number;\n    let height: number;\n\n    if (rect.bounds.width / rect.bounds.height > aspectRatio) {\n      width = rect.bounds.width;\n      height = rect.bounds.width / aspectRatio;\n    } else {\n      width = rect.bounds.height * aspectRatio;\n      height = rect.bounds.height;\n    }\n\n    const left = 0.5 * (rect.bounds.width - width);\n    const top = 0.5 * (rect.bounds.height - height);\n\n    setCenteredStyles({\n      position: 'absolute',\n      left,\n      top,\n      width,\n      height,\n    });\n  };\n  return (\n    <Measure bounds onResize={handleResize}>\n      {({ measureRef }) => (\n        <div ref={measureRef} style={{ position: 'absolute', width: '100%', height: '100%' }}>\n          <div style={centeredStyle}>{children}</div>\n        </div>\n      )}\n    </Measure>\n  );\n};\n\nexport const CoverResizer = React.memo(CoverResizerElement);\n","export const config = {\n  backgroundVideoURL: process.env.PUBLIC_URL + '/assets/background.mp4',\n  videoMinStep: 0,\n  videoMaxStep: 5,\n};\n","export const TimerUtil = {\n  interpolate: (\n    from: number,\n    to: number,\n    duration: number,\n    steps: number,\n    callback: (t: number) => void,\n    onFinish?: () => void,\n  ) => {\n    const interval = duration / steps;\n    let i = 0;\n    const intervalID = window.setInterval(() => {\n      callback(from + (to - from) * (i / steps));\n      i++;\n      if (i > steps) {\n        window.clearInterval(intervalID);\n        if (onFinish) {\n          onFinish();\n        }\n      }\n    }, interval);\n  },\n};\n","import React from 'react';\nimport './FakeMapFooter.css';\n\nconst FakeMapFooterElement: React.FC = () => {\n  const currentYear = new Date().getFullYear();\n  return (\n    <div className=\"footer-container\">\n      <div className=\"footer-content\">\n        <div>&copy; jperlmaps {currentYear}</div>\n      </div>\n    </div>\n  );\n};\n\nexport const FakeMapFooter = React.memo(FakeMapFooterElement);\n","import React, { useCallback, useRef } from 'react';\nimport ReactPlayer from 'react-player';\nimport { config } from '../../config';\nimport { TimerUtil } from '../../Utils/TimerUtil';\nimport { ArrowButton, CoverResizer } from '../Atoms';\nimport { Compass } from '../Atoms/Compass';\nimport { FakeMapFooter } from '../Atoms/FakeMapFooter';\nimport './FakeMapPage.css';\n\ntype FakeMapProps = {};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst FakeMapPageElement: React.FC<FakeMapProps> = (props) => {\n  const currentStep = useRef<number>(0);\n  const isPlaying = useRef<boolean>(false);\n  const playerRef = useRef<ReactPlayer | null>();\n  const queueNextPlay = useRef<boolean>(false);\n  const nextPlayDirection = useRef<number>(0);\n\n\n  const handlePlay = (toStep: number) => {\n    if (isPlaying.current) {\n      queueNextPlay.current = true;\n      return;\n    }\n\n    const nextStep = Math.max(config.videoMinStep, Math.min(config.videoMaxStep, toStep));\n    if (nextStep === currentStep.current) {\n      return;\n    }\n\n    isPlaying.current = true;\n    TimerUtil.interpolate(\n      currentStep.current,\n      nextStep,\n      1000,\n      30,\n      (t) => {\n        playerRef.current?.seekTo(t, 'seconds');\n      },\n      () => {\n        isPlaying.current = false;\n        currentStep.current = nextStep;\n        if (queueNextPlay.current === true) {\n          queueNextPlay.current = false;\n          handlePlay(currentStep.current + nextPlayDirection.current);\n        }\n      },\n    );\n  };\n\n  const handlePressLeft = () => {\n    handlePlay(currentStep.current - 1);\n    nextPlayDirection.current = -1;\n  };\n\n  const handlePressRight = () => {\n    handlePlay(currentStep.current + 1);\n    nextPlayDirection.current = 1;\n  };\n\n  return (\n    <div className=\"container\">\n      <CoverResizer aspectRatio={16 / 9}>\n        <div>\n          <ReactPlayer\n            ref={(ref) => (playerRef.current = ref)}\n            url={config.backgroundVideoURL}\n            className=\"react-player\"\n            width=\"100%\"\n            height=\"100%\"\n          />\n          hey\n        </div>\n      </CoverResizer>\n      <div style={{ width: '100vw', height: '100vh', position: 'absolute', display: 'flex', cursor: 'pointer' }}>\n        <div style={{ alignSelf: 'stretch', flex: 1 }} onMouseDown={handlePressLeft} />\n        <div style={{ alignSelf: 'stretch', flex: 1 }} onMouseDown={handlePressRight} />\n      </div>\n      {/*\n      <ArrowButton left className=\"left-arrow-button\" onPress={handlePressLeft} />\n      <ArrowButton right className=\"right-arrow-button\" onPress={handlePressRight} />\n      <Compass className=\"compass\" />\n      */}\n      <FakeMapFooter />\n    </div>\n  );\n};\n\nexport const FakeMapPage = React.memo(FakeMapPageElement);\n","import React from 'react';\nimport './App.css';\nimport ReactPlayer from 'react-player';\nimport { config } from './config';\nimport { FakeMapPage } from './Components';\n\nfunction App() {\n  return (\n    <FakeMapPage />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}